#!/bin/bash -e
# Script for building OpenSSL for Android
# 2020-12-09 Bela Bursan

. config

# # # # # # # # # # # # # # #  OPENSSL  # # # # # # # # # # # # # # # # # # #
OPENSSL_DOWNLOAD_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
# Possible values: android-arm, android-arm64, android-x86, android-x86 etc
ARCHITECTURES=("android-arm" "android-arm64")



## Cleans old stuff
function clean_openssl()
{
    cd /tmp
    if [ -d  "/tmp/$OPENSSL_DIR_NAME" ]; then
      rm -rf "/tmp/$OPENSSL_DIR_NAME"
    fi
}

## Creates neccessary directories
function setup_openssl()
{
    if [ ! -d "$ROOT_LIB_DIR/$OPENSSL_DIR_NAME" ]; then
        mkdir -p "$ROOT_LIB_DIR/$OPENSSL_DIR_NAME"
    fi
}

## Downloads the openssl source
function download_openssl()
{
    echoy "Downloading OpenSSL ${OPENSSL_VERSION} ..."
    cd /tmp
    curl -L -# -o openssl.tar.gz "$OPENSSL_DOWNLOAD_URL" 2>&1
    tar xzf openssl.tar.gz && rm -rf openssl.tar.gz
    echog "Done"
}


## Copies the result to the libs map
function copy_lib()
{
    arch="$1"
    cd /tmp
    GLOBAL_LIB="$ROOT_LIB_DIR/$OPENSSL_DIR_NAME/$arch"
    mkdir -p $GLOBAL_LIB
    cp -r "$OPENSSL_DIR_NAME" "$GLOBAL_LIB"
    cd "$GLOBAL_LIB/$OPENSSL_DIR_NAME"
    mkdir -p lib
    cp lib*.a lib
}


## Build the lib
function build_openssl()
{
    CC=${NDK_TOOLCHAIN_VERSION}

    for arch in "${ARCHITECTURES[@]}"
    do
        REAL_ARCH="arm64-v8a"
        if [ "$arch" == "android-arm" ]; then 
            REAL_ARCH="armeabi-v7a"
        fi

	    cd "/tmp/$OPENSSL_DIR_NAME"

        echoy "\nCompiling openssl for arch: $REAL_ARCH"
        # C O N F I G U R E
        ./Configure ${arch} -D__ANDROID_API__=$ANDROID_TARGET_API

        # B U I L D
        make clean && make 2>&1 > /dev/null
        copy_lib "$REAL_ARCH"
    done
    echog "\nOpenSSL built successfully\n"
}

# # # # # S T A R T # # #
clean_openssl
setup_openssl
set_android_paths
download_openssl
build_openssl
clean_openssl
